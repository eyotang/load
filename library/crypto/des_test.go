package crypto

import (
	"testing"

	. "github.com/smartystreets/goconvey/convey"
)

func TestDesEncryptDecrypt(t *testing.T) {
	type params struct {
		mode         uint8
		padmode      uint8
		plaintext    []byte
		expectCipher []byte
	}

	var (
		targetPlain []byte
		ciphertext  []byte
		des         *Des
		pars        []params
		p           params
		err         error
	)

	Convey("TEST Des", t, func() {
		pars = []params{
			{
				mode:         CBC,
				padmode:      PAD_PKCS5,
				plaintext:    []byte{10, 5, 116, 101, 115, 116, 49, 18, 1, 49, 26, 1, 49, 32, 162, 224, 194, 181, 5, 42, 1, 49, 50, 1, 49, 58, 1, 49, 66, 10, 50, 48, 49, 56, 46, 48, 55, 46, 51, 49, 74, 1, 49, 80, 0, 88, 1, 98, 3, 52, 46, 48, 106, 0, 114, 0, 122, 0, 130, 1, 0},
				expectCipher: []byte{147, 8, 1, 20, 25, 29, 81, 249, 66, 4, 214, 0, 31, 111, 52, 50, 244, 148, 151, 42, 16, 111, 66, 14, 7, 241, 214, 26, 193, 4, 88, 141, 134, 184, 232, 13, 33, 17, 47, 63, 115, 245, 121, 122, 77, 16, 24, 30, 115, 76, 184, 254, 244, 140, 150, 121, 161, 101, 189, 27, 134, 226, 29, 159},
			},
			{
				mode:         ECB,
				padmode:      PAD_PKCS5,
				plaintext:    []byte{10, 5, 116, 101, 115, 116, 49, 18, 1, 49, 26, 1, 49, 32, 162, 224, 194, 181, 5, 42, 1, 49, 50, 1, 49, 58, 1, 49, 66, 10, 50, 48, 49, 56, 46, 48, 55, 46, 51, 49, 74, 1, 49, 80, 0, 88, 1, 98, 3, 52, 46, 48, 106, 0, 114, 0, 122, 0, 130, 1, 0},
				expectCipher: []byte{78, 247, 213, 53, 227, 112, 244, 30, 70, 31, 147, 160, 61, 35, 89, 15, 40, 77, 221, 243, 17, 139, 81, 241, 173, 248, 8, 12, 206, 135, 108, 195, 252, 40, 33, 56, 169, 20, 107, 164, 46, 81, 162, 95, 110, 193, 118, 203, 204, 165, 74, 51, 246, 135, 154, 15, 243, 203, 63, 146, 212, 140, 45, 115},
			},
			{
				mode:         CBC,
				padmode:      PAD_NORMAL,
				plaintext:    []byte{10, 5, 116, 101, 115, 116, 49, 18, 1, 49, 26, 1, 49, 32, 162, 224, 194, 181, 5, 42, 1, 49, 50, 1, 49, 58, 1, 49, 66, 10, 50, 48, 49, 56, 46, 48, 55, 46, 51, 49, 74, 1, 49, 80, 0, 88, 1, 98, 3, 52, 46, 48, 106, 0, 114, 0, 122, 0, 130, 1},
				expectCipher: []byte{147, 8, 1, 20, 25, 29, 81, 249, 66, 4, 214, 0, 31, 111, 52, 50, 244, 148, 151, 42, 16, 111, 66, 14, 7, 241, 214, 26, 193, 4, 88, 141, 134, 184, 232, 13, 33, 17, 47, 63, 115, 245, 121, 122, 77, 16, 24, 30, 115, 76, 184, 254, 244, 140, 150, 121, 31, 97, 70, 162, 2, 122, 48, 122},
			},
			{
				mode:         ECB,
				padmode:      PAD_NORMAL,
				plaintext:    []byte{10, 5, 116, 101, 115, 116, 49, 18, 1, 49, 26, 1, 49, 32, 162, 224, 194, 181, 5, 42, 1, 49, 50, 1, 49, 58, 1, 49, 66, 10, 50, 48, 49, 56, 46, 48, 55, 46, 51, 49, 74, 1, 49, 80, 0, 88, 1, 98, 3, 52, 46, 48, 106, 0, 114, 0, 122, 0, 130, 1},
				expectCipher: []byte{78, 247, 213, 53, 227, 112, 244, 30, 70, 31, 147, 160, 61, 35, 89, 15, 40, 77, 221, 243, 17, 139, 81, 241, 173, 248, 8, 12, 206, 135, 108, 195, 252, 40, 33, 56, 169, 20, 107, 164, 46, 81, 162, 95, 110, 193, 118, 203, 204, 165, 74, 51, 246, 135, 154, 15, 231, 218, 180, 105, 154, 45, 88, 141},
			},
		}
		for _, p = range pars {
			des, err = NewDes([]byte("BONGBONG"), p.mode, []byte("BONGBONG"), p.padmode)
			So(err, ShouldBeNil)

			ciphertext = des.Encrypt(p.plaintext)
			//fmt.Printf("===>%v\n", ciphertext)
			So(ciphertext, ShouldResemble, p.expectCipher)

			targetPlain = des.Decrypt(ciphertext)
			So(targetPlain, ShouldResemble, p.plaintext)
		}
	})
}
